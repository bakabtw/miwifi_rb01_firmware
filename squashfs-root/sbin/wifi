#!/usr/bin/env lua
-- Alternative for OpenWrt's /sbin/wifi.
-- Copyright Not Reserved.
-- Hua Shao <nossiac@163.com>

package.path = '/lib/wifi/?.lua;'..package.path

local mtkwifi = require("mtkwifi")
local nixio = require("nixio")
cmd = arg[1]
dev = arg[2]

if cmd ~= "detect" then
	for _,f in ipairs(string.split(mtkwifi.read_pipe("find /lib/wifi/ -name \"*.lua\" 2>/dev/null"), "\n")) do
		dofile(f)
	end
end

function usage()
	print("wifi <up|down|reset|reload|restart|status> [devname]")
end

function wifi_common_up(devname)
	nixio.syslog("debug", "wifi_common_up "..tostring(devname))

	-- need to find out the vif prefix for this device
	for _,vif in ipairs(string.split(mtkwifi.read_pipe("ls /sys/class/net"), "\n"))
	do
		if string.match(vif, "ra%a-%d+") then
			os.execute("ifconfig "..vif.." up")
		end
	end
	for _,vif in ipairs(string.split(mtkwifi.read_pipe("ls /sys/class/net"), "\n"))
	do
		if string.match(vif, "apcli%a-%d+") then
			os.execute("ifconfig "..vif.." up")
		end
	end

	if devname then
		os.execute("rm -f /tmp/mtk/wifi/"..devname.."*.need_reload")
	else
		os.execute("rm -f /tmp/mtk/wifi/*.need_reload")
	end
end

function wifi_common_down(devname)
	nixio.syslog("debug", "wifi_common_down "..tostring(devname))

	-- need to find out the vif prefix for this device
	for _,vif in ipairs(string.split(mtkwifi.read_pipe("ls /sys/class/net"), "\n"))
	do
		if string.match(vif, "apcli%d+")
		or string.match(vif, "apclii%d+") then
			os.execute("ifconfig "..vif.." down")
		end
	end
	for _,vif in ipairs(string.split(mtkwifi.read_pipe("ls /sys/class/net"), " "))
	do
		if string.match(vif, "ra%d+")
		or string.match(vif, "rai%d+")
		or string.match(vif, "rae%d+")
		or string.match(vif, "rax%d+") then
			os.execute("ifconfig "..vif.." down")
		end
	end
end

function wifi_common_restart(devname)
	nixio.syslog("debug", "wifi_common_restart "..tostring(devname))
	wifi_common_up()
	wifi_common_down()
end

function wifi_common_reload(devname)
	nixio.syslog("debug", "wifi_common_reload "..tostring(devname))
	wifi_common_up()
	wifi_common_down()
end

function wifi_common_reset(devname)
	nixio.syslog("debug", "wifi_common_reset called!")
	local curpath = "/etc/wireless/"
	if devname then
		curpath = curpath..devname.."/"
	end
	local defpath = "/rom"..defpath
	if mtkwifi.exists(defpath) then
		os.execute("rm -rf "..curpath)
		os.execute("cp -rf "..defpath.." "..curpath)
		wifi_common_reload()
	else
		nixio.syslog("debug", defpath.." missing, unable to reset!")
	end
end

function wifi_common_status(devname)
	nixio.syslog("debug", "wifi_common_status "..tostring(devname))
	print(mtkwifi.read_pipe("iwconfig"))
	print(mtkwifi.read_pipe("ifconfig -a"))
end

function wifi_common_detect(devname)
	nixio.syslog("debug", "wifi_common_detect "..tostring(devname))
	local devs = mtkwifi.getdevs()
	for _,dev in ipairs(devs) do
		print("config wifi-device "..dev.devname..
			"\n\toption type "..dev.devname..
			"\n\toption vendor ralink"..
			"\n\toption channel "..dev.Channel)
		for _,vif in ipairs(dev.vifs) do
			print("\nconfig wifi-iface"..
				"\n\toption device"..dev.devname..
				"\n\toption ifname"..vif.vifname..
				"\n\toption network lan"..
				"\n\toption mode ap")
		end
	end
end

function wifi(cmd, devname)
	local mtkwifi = require("mtkwifi")
	local devs, l1parser = mtkwifi.__get_l1dat()
	local is_ftm = mtkwifi.read_pipe("cat /proc/xiaoqiang/ft_mode")
	local wl0_radio = mtkwifi.__trim(mtkwifi.read_pipe("nvram get wl0_radio"))
	local wl1_radio = mtkwifi.__trim(mtkwifi.read_pipe("nvram get wl1_radio"))

	if '1' == is_ftm and '1' ~= wl0_radio and '1' ~= wl1_radio then
		os.execute("echo ftm mode > /dev/console")
		return 0
	end

	l1parser.creat_link_for_nvram()
	if not devs or not l1parser then
		return wifi_orig(cmd, devname)
	end

	if devname then
		for rfname, dev in mtkwifi.__spairs(devs.devname_ridx) do
			if dev.main_ifname == devname or devname == rfname then
				local compatname = dev.init_compatible
				assert(compatname)

				if _G[compatname.."_"..cmd] then
					nixio.syslog("info", "call "..compatname.."_"..cmd.."("..rfname..")")
					_G[compatname.."_"..cmd](rfname)
				end
			end
		end
	else
		-- if devname not specified
		if cmd == "restart" or cmd == "reload" then
			local tab_compatname = {}
			for key, dev in pairs(devs.devname_ridx) do
				tab_compatname[key] = dev.init_compatible
			end
			local tab_rp = {}
			for key,val in pairs(tab_compatname) do
				tab_rp[val] = true
			end

			for dev, val in pairs(tab_rp) do
				nixio.syslog("info", "call "..dev.."_"..cmd)
				_G[dev.."_"..cmd]()
			end
		else
			for devname, dev in mtkwifi.__spairs(devs.devname_ridx) do
				local compatname = dev.init_compatible
				nixio.syslog("info", "call "..compatname.."_"..cmd.."("..devname..")")
				_G[compatname.."_"..cmd](devname)
			end

			if cmd == "up" then
				os.execute("/etc/init.d/miwifi-roam restart")
				os.execute("/etc/init.d/topomon restart")
				os.execute("/etc/init.d/miwifi-discovery restart")
			end
		end
	end

	-- for wifi service which should setup after wifi up
	if  cmd == "up" or cmd == "restart" or cmd == "reload" or cmd == "reset" then
		_G["wifi_service_misc"]()
		os.execute("echo 3 > /proc/sys/vm/drop_caches")
	end
end

function wifi_orig(cmd,devname)
	print("wifi_orig",cmd,devname)
	local relname = nil
	if devname then
		relname = string.split(devname,".")[1]
	end

	if relname then
		if _G[relname.."_"..cmd] then
			nixio.syslog("info", "call "..relname.."_"..cmd.."("..devname..")")
			_G[relname.."_"..cmd](devname)
		end
	else
		local devinfo = mtkwifi.search_dev_and_profile()
		local done = {}
		for __devname in pairs(devinfo) do
			local __relname = string.split(__devname,".")[1]
			repeat
				-- common case
				if done[__relname] then break else done[__relname] = true end
				if _G[__relname.."_"..cmd] then
					nixio.syslog("info", "call "..__relname.."_"..cmd.."("..__devname..")")
					_G[__relname.."_"..cmd](__devname)
					break
				end
				-- try shell
				local dev_shell = "/lib/wifi/"..__relname..".sh"
				if mtkwifi.exists(dev_shell) then
					local cmd = "source "..dev_shell.."; "..__relname.."_"..cmd.." > /dev/null"
					nixio.syslog("info", cmd)
					if os.execute(cmd) ~= 0 then
						nixio.syslog("err", cmd)
					end
					break
				end
				-- fall back on common api
				nixio.syslog("info", "no scripts for "..__relname.." found, fall back on common api!")
				_G["wifi_common_"..cmd](__devname)
			until true
		end
	end
end

local LuciUtil = require("luci.util")
function dosyscmd(cmd, default)
    if cmd == nil or cmd == "" then
        return default
    end
    local value = LuciUtil.exec(cmd)
    if value then
        value = LuciUtil.trim(value)
    end

    if value == nil or value == "" then
        return default
    else
        return value
    end
end

function mtk_wifi_detect()
    local mtkwifi = require("mtkwifi")
    local devs, l1parser = mtkwifi.__get_l1dat()
    local relname
    local macaddr
    local guest_ifname = "wl14"
    local miot_ifname = "wl13"
    local CountryCode = dosyscmd("bdata get CountryCode","CN")
    local bh_5G_ap = dosyscmd("uci -q get misc.backhauls.backhaul_5g_ap_iface","wl5")
    local bh_5G_sta = dosyscmd("uci -q get misc.backhauls.backhaul_5g_sta_iface","apclii0")
    local bh_5G_wps = dosyscmd("uci -q get misc.wireless.mesh_ifname_5G","wl9")
    local bh_5G_ssid = dosyscmd("openssl rand -base64 8 | md5sum | cut -c1-8", "xiaomi_bh_ssid")
    local bh_5G_key = dosyscmd("openssl rand -base64 8 | md5sum | cut -c1-16", "xiaomi_bh_key")

    for devname, dev in mtkwifi.__spairs(devs.devname_ridx) do
        if devname == "MT7622.1" then
            relname = "MT7622_1"
            hwband = "2G"
            ssid = dosyscmd("bdata get wl1_ssid", "xiaomi")
            ifname = "wl1"
            guest_ifname = "wl14"
            macaddr = dosyscmd("getmac wl1", "00:11:22:33:44:55")
        elseif devname == "MT7915.1" then
            relname = "MT7915_1"
            hwband = "5G"
            ssid = dosyscmd("bdata get wl0_ssid", "xiaomi_5G")
            ifname = "wl0"
            guest_ifname = "wl15"
            macaddr = dosyscmd("getmac wl0", "00:11:22:33:44:56")
        else
            break
        end
        print([[
config wifi-device ]]..relname.."\n"..[[
    option vendor ralink
    option device ]]..relname.."\n"..[[
    option band ]]..hwband.."\n"..[[
    option country ]]..CountryCode.."\n"..[[
    option macaddr ]]..macaddr.."\n"..[[
    option txpwr max
    option bw 0
    option channel 0
    option ax 1
    option txbf 3
    option disabled 0
    option WscModelName RB01
    option AutoChannelSkipList '12;13'
    option DisableCountryIe 1
]])

    if hwband == "2G" then
    print([[
config wifi-iface
    option device ]]..relname.."\n"..[[
    option ifname ]]..ifname.."\n"..[[
    option network lan
    option mode ap
    option disabled 0
    option encryption none
    option key 12345678
    option wmm 1
    option hidden 0
    option vifidx 1
    option MbssMaxStaNum 64
    option ssid ]]..ssid.."\n")

    print([[
config wifi-iface guest_2G
    option device ]]..relname.."\n"..[[
    option ifname ]]..guest_ifname.."\n"..[[
    option network guest
    option mode ap
    option disabled 1
    option encryption psk2
    option key 12345678
    option wmm 1
    option hidden 0
    option vifidx 2
    option MbssMaxStaNum 64
]])

    print([[
config wifi-iface miot_2G
    option device ]]..relname.."\n"..[[
    option ifname ]]..miot_ifname.."\n"..[[
    option network miot
    option mode ap
    option ssid 25c829b1922d3123_miwifi
    option disabled 1
    option encryption none
    option wmm 1
    option hidden 1
    option vifidx 3
    option MbssMaxStaNum 64
    option userswitch 1
]])

    elseif hwband == "5G" then
    print([[
config wifi-iface
    option device ]]..relname.."\n"..[[
    option ifname ]]..ifname.."\n"..[[
    option network lan
    option mode ap
    option disabled 0
    option encryption none
    option key 12345678
    option wmm 1
    option hidden 0
    option miwifi_mesh 1
    option vifidx 1
    option MbssMaxStaNum 64
    option ssid ]]..ssid.."\n")

    print([[
config wifi-iface bh_5G_ap
    option device ]]..relname.."\n"..[[
    option ifname ]]..bh_5G_ap.."\n"..[[
    option network lan
    option mode ap
    option disabled 1
    option encryption psk2
    option key ]]..bh_5G_key.."\n"..[[
    option wmm 1
    option hidden 0
    option vifidx 2
    option ssid MiMesh_]]..bh_5G_ssid.."\n")

    print([[
config wifi-iface bh_5G_wps
    option device ]]..relname.."\n"..[[
    option ifname ]]..bh_5G_wps.."\n"..[[
    option network lan
    option mode ap
    option disabled 1
    option encryption none
    option key 12345678
    option wmm 1
    option hidden 0
    option vifidx 3
    option ssid MiMesh_Wps
]])

    print([[
config wifi-iface bh_5G_sta
    option device ]]..relname.."\n"..[[
    option ifname ]]..bh_5G_sta.."\n"..[[
    option network lan
    option mode sta
    option disabled 1
    option encryption psk2
    option ssid MiMesh_sta
    option key 12345678
]])
    end

    end
end

function xq_sync_re()
	local open_file
	local open_err
	local uci  = require "luci.model.uci".cursor()
	local net_mode = uci:get("xiaoqiang", "common", "NETMODE")
	local xqwhc_wifi_lock = "/var/run/xqwhc_wifi.lock"

	if net_mode ~= "whc_cap" and net_mode ~= "whc_re" and net_mode ~= "lanapmode" then
		nixio.syslog("debug", "xq_sync_re: run in NON xqwhc mode, ignore!")
		return
	end

	local cap_mode = uci:get("xiaoqiang", "common", "CAP_MODE")
	local mesh_version = uci:get("xiaoqiang", "common", "MESH_VERSION")
	if net_mode == "lanapmode" and (cap_mode ~= "ap" or tostring(mesh_version) == "1" or mesh_version == nil) then
		nixio.syslog("debug", "xq_sync_re: run in NON xqwhc mode, ignore!")
		return
	end

	if net_mode == "whc_cap" or ( net_mode == "lanapmode" and  cap_mode == "ap") then
		dosyscmd("mesh_cmd sync", nil)
	else
		nixio.syslog("debug", "xq_sync_re: NONCAP, ignore!")
	end
end

os.execute("lock /tmp/run/wifi.lock")
if cmd == "up"
or cmd == "reload"
or cmd == "restart"
or cmd == "reload_legacy" then
	os.execute("uci2dat -u /etc/config/wireless -l /etc/wireless/l1profile.dat")
end

if cmd == "up"
or cmd == "down"
or cmd == "status"
or cmd == "reload"
or cmd == "restart"
or cmd == "reset" then
	wifi(cmd, dev)
elseif cmd == "reload_legacy" then
	nixio.syslog("info", "legacy command "..cmd)
	wifi("reload", dev)
elseif cmd == "detect" then
	mtk_wifi_detect()
else
	os.execute("uci2dat -u /etc/config/wireless -l /etc/wireless/l1profile.dat")
	xq_sync_re()
	wifi("down", false)
	wifi("up", false)
end
os.execute("lock -u  /tmp/run/wifi.lock")
